"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}

type DeleteMutationResponse {
  documentId: ID!
}

enum PublicationStatus {
  DRAFT
  PUBLISHED
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  eqi: ID
  ne: ID
  nei: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  eqi: Boolean
  ne: Boolean
  nei: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  eqi: String
  ne: String
  nei: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  eqi: Int
  ne: Int
  nei: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}

input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  eqi: Float
  ne: Float
  nei: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}

input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  eqi: DateTime
  ne: DateTime
  nei: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  eqi: JSON
  ne: JSON
  nei: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}

input ComponentRepeatablesSpecsFiltersInput {
  Motor: StringFilterInput
  Speed: IntFilterInput
  Transmission: StringFilterInput
  Horsepower: IntFilterInput
  LiterPerKM: FloatFilterInput
  MaxSpeed: IntFilterInput
  Origin: StringFilterInput
  AssembledIn: StringFilterInput
  Acceleration: FloatFilterInput
  LengthInMM: IntFilterInput
  WidthInMM: IntFilterInput
  HeightInMM: IntFilterInput
  GroundClearanceInMM: IntFilterInput
  WheelBase: IntFilterInput
  TrunkSize: IntFilterInput
  Seats: IntFilterInput
  TractionType: StringFilterInput
  and: [ComponentRepeatablesSpecsFiltersInput]
  or: [ComponentRepeatablesSpecsFiltersInput]
  not: ComponentRepeatablesSpecsFiltersInput
}

input ComponentRepeatablesSpecsInput {
  id: ID
  Motor: String
  Speed: Int
  Transmission: String
  Horsepower: Int
  LiterPerKM: Float
  MaxSpeed: Int
  Origin: String
  AssembledIn: String
  Acceleration: Float
  LengthInMM: Int
  WidthInMM: Int
  HeightInMM: Int
  GroundClearanceInMM: Int
  WheelBase: Int
  TrunkSize: Int
  Seats: Int
  TractionType: String
}

type ComponentRepeatablesSpecs {
  id: ID!
  Motor: String!
  Speed: Int!
  Transmission: String!
  Horsepower: Int!
  LiterPerKM: Float!
  MaxSpeed: Int!
  Origin: String
  AssembledIn: String
  Acceleration: Float
  LengthInMM: Int
  WidthInMM: Int
  HeightInMM: Int
  GroundClearanceInMM: Int
  WheelBase: Int
  TrunkSize: Int
  Seats: Int
  TractionType: String
}

input ComponentRepeatablesCarsFiltersInput {
  showroom: ShowroomFiltersInput
  Price: IntFilterInput
  and: [ComponentRepeatablesCarsFiltersInput]
  or: [ComponentRepeatablesCarsFiltersInput]
  not: ComponentRepeatablesCarsFiltersInput
}

input ComponentRepeatablesCarsInput {
  id: ID
  showroom: ID
  Price: Int
}

type ComponentRepeatablesCars {
  id: ID!
  showroom: Showroom
  Price: Int!
}

input ComponentCommonLocationFiltersInput {
  governorate: GovernorateFiltersInput
  city: CityFiltersInput
  Address: StringFilterInput
  Latitude: FloatFilterInput
  Longitude: FloatFilterInput
  and: [ComponentCommonLocationFiltersInput]
  or: [ComponentCommonLocationFiltersInput]
  not: ComponentCommonLocationFiltersInput
}

input ComponentCommonLocationInput {
  id: ID
  governorate: ID
  city: ID
  Address: String
  Latitude: Float
  Longitude: Float
}

type ComponentCommonLocation {
  id: ID!
  governorate: Governorate
  city: City
  Address: String!
  Latitude: Float!
  Longitude: Float!
}

input ComponentCommonContactInfoFiltersInput {
  Phone: StringFilterInput
  Whatsapp: StringFilterInput
  Email: StringFilterInput
  WebsiteURL: StringFilterInput
  Tiktok: StringFilterInput
  Youtube: StringFilterInput
  X: StringFilterInput
  Instagram: StringFilterInput
  Facebook: StringFilterInput
  and: [ComponentCommonContactInfoFiltersInput]
  or: [ComponentCommonContactInfoFiltersInput]
  not: ComponentCommonContactInfoFiltersInput
}

input ComponentCommonContactInfoInput {
  id: ID
  Phone: String
  Whatsapp: String
  Email: String
  WebsiteURL: String
  Tiktok: String
  Youtube: String
  X: String
  Instagram: String
  Facebook: String
}

type ComponentCommonContactInfo {
  id: ID!
  Phone: String!
  Whatsapp: String
  Email: String
  WebsiteURL: String
  Tiktok: String
  Youtube: String
  X: String
  Instagram: String
  Facebook: String
}

input UploadFileFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}

type UploadFile {
  documentId: ID!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type UploadFileEntityResponseCollection {
  nodes: [UploadFile!]!
  pageInfo: Pagination!
}

type UploadFileRelationResponseCollection {
  nodes: [UploadFile!]!
}

input I18NLocaleFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}

type I18NLocale {
  documentId: ID!
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type I18NLocaleEntityResponseCollection {
  nodes: [I18NLocale!]!
  pageInfo: Pagination!
}

input ReviewWorkflowsWorkflowFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  stages: ReviewWorkflowsWorkflowStageFiltersInput
  stageRequiredToPublish: ReviewWorkflowsWorkflowStageFiltersInput
  contentTypes: JSONFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [ReviewWorkflowsWorkflowFiltersInput]
  or: [ReviewWorkflowsWorkflowFiltersInput]
  not: ReviewWorkflowsWorkflowFiltersInput
}

input ReviewWorkflowsWorkflowInput {
  name: String
  stages: [ID]
  stageRequiredToPublish: ID
  contentTypes: JSON
  publishedAt: DateTime
}

type ReviewWorkflowsWorkflow {
  documentId: ID!
  name: String!
  stages_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ReviewWorkflowsWorkflowStageRelationResponseCollection
  stages(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ReviewWorkflowsWorkflowStage]!
  stageRequiredToPublish: ReviewWorkflowsWorkflowStage
  contentTypes: JSON!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type ReviewWorkflowsWorkflowEntityResponseCollection {
  nodes: [ReviewWorkflowsWorkflow!]!
  pageInfo: Pagination!
}

input ReviewWorkflowsWorkflowStageFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  color: StringFilterInput
  workflow: ReviewWorkflowsWorkflowFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [ReviewWorkflowsWorkflowStageFiltersInput]
  or: [ReviewWorkflowsWorkflowStageFiltersInput]
  not: ReviewWorkflowsWorkflowStageFiltersInput
}

input ReviewWorkflowsWorkflowStageInput {
  name: String
  color: String
  workflow: ID
  publishedAt: DateTime
}

type ReviewWorkflowsWorkflowStage {
  documentId: ID!
  name: String
  color: String
  workflow: ReviewWorkflowsWorkflow
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type ReviewWorkflowsWorkflowStageEntityResponseCollection {
  nodes: [ReviewWorkflowsWorkflowStage!]!
  pageInfo: Pagination!
}

type ReviewWorkflowsWorkflowStageRelationResponseCollection {
  nodes: [ReviewWorkflowsWorkflowStage!]!
}

input UsersPermissionsPermissionFiltersInput {
  documentId: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
  documentId: ID!
  action: String!
  role: UsersPermissionsRole
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type UsersPermissionsPermissionRelationResponseCollection {
  nodes: [UsersPermissionsPermission!]!
}

input UsersPermissionsRoleFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  publishedAt: DateTime
}

type UsersPermissionsRole {
  documentId: ID!
  name: String!
  description: String
  type: String
  permissions_connection(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsPermission]!
  users_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsUser]!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type UsersPermissionsRoleEntityResponseCollection {
  nodes: [UsersPermissionsRole!]!
  pageInfo: Pagination!
}

input UsersPermissionsUserFiltersInput {
  documentId: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  publishedAt: DateTime
  password: String
}

type UsersPermissionsUser {
  documentId: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponseCollection {
  nodes: [UsersPermissionsUser!]!
  pageInfo: Pagination!
}

type UsersPermissionsUserRelationResponseCollection {
  nodes: [UsersPermissionsUser!]!
}

input AdvertisementFiltersInput {
  documentId: IDFilterInput
  Action: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: AdvertisementFiltersInput
  and: [AdvertisementFiltersInput]
  or: [AdvertisementFiltersInput]
  not: AdvertisementFiltersInput
}

input AdvertisementInput {
  Banner: ID
  Action: String
  publishedAt: DateTime
}

type Advertisement {
  documentId: ID!
  Banner: UploadFile!
  Action: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  locale: String
  localizations_connection(filters: AdvertisementFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): AdvertisementRelationResponseCollection
  localizations(filters: AdvertisementFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Advertisement]!
}

type AdvertisementEntityResponseCollection {
  nodes: [Advertisement!]!
  pageInfo: Pagination!
}

type AdvertisementRelationResponseCollection {
  nodes: [Advertisement!]!
}

input BrandFiltersInput {
  documentId: IDFilterInput
  Name: StringFilterInput
  Slug: StringFilterInput
  car_models: CarModelFiltersInput
  showrooms: ShowroomFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: BrandFiltersInput
  and: [BrandFiltersInput]
  or: [BrandFiltersInput]
  not: BrandFiltersInput
}

input BrandInput {
  Name: String
  Slug: String
  Logo: ID
  car_models: [ID]
  showrooms: [ID]
  publishedAt: DateTime
}

type Brand {
  documentId: ID!
  Name: String!
  Slug: String!
  Logo: UploadFile!
  car_models_connection(filters: CarModelFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CarModelRelationResponseCollection
  car_models(filters: CarModelFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [CarModel]!
  showrooms_connection(filters: ShowroomFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ShowroomRelationResponseCollection
  showrooms(filters: ShowroomFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Showroom]!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  locale: String
  localizations_connection(filters: BrandFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): BrandRelationResponseCollection
  localizations(filters: BrandFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Brand]!
}

type BrandEntityResponseCollection {
  nodes: [Brand!]!
  pageInfo: Pagination!
}

type BrandRelationResponseCollection {
  nodes: [Brand!]!
}

enum ENUM_CARMODEL_BODYTYPE {
  Sedan
  SUV
}

enum ENUM_CARMODEL_FUELTYPE {
  ELectric
  Hybrid
  x80
  x90
  x92
  x95
}

input CarModelFiltersInput {
  documentId: IDFilterInput
  Name: StringFilterInput
  BodyType: StringFilterInput
  FuelType: StringFilterInput
  Slug: StringFilterInput
  brand: BrandFiltersInput
  car_variants: CarVariantFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: CarModelFiltersInput
  and: [CarModelFiltersInput]
  or: [CarModelFiltersInput]
  not: CarModelFiltersInput
}

input CarModelInput {
  Name: String
  BodyType: ENUM_CARMODEL_BODYTYPE
  FuelType: ENUM_CARMODEL_FUELTYPE
  Slug: String
  brand: ID
  car_variants: [ID]
  Images: [ID]
  publishedAt: DateTime
}

type CarModel {
  documentId: ID!
  Name: String!
  BodyType: ENUM_CARMODEL_BODYTYPE!
  FuelType: ENUM_CARMODEL_FUELTYPE
  Slug: String!
  brand: Brand
  car_variants_connection(filters: CarVariantFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CarVariantRelationResponseCollection
  car_variants(filters: CarVariantFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [CarVariant]!
  Images_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  Images(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UploadFile]!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  locale: String
  localizations_connection(filters: CarModelFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CarModelRelationResponseCollection
  localizations(filters: CarModelFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [CarModel]!
}

type CarModelEntityResponseCollection {
  nodes: [CarModel!]!
  pageInfo: Pagination!
}

type CarModelRelationResponseCollection {
  nodes: [CarModel!]!
}

input CarVariantFiltersInput {
  documentId: IDFilterInput
  Name: StringFilterInput
  car_model: CarModelFiltersInput
  Year: IntFilterInput
  Price: IntFilterInput
  MinimumDownPaymet: IntFilterInput
  MinimumInstallments: IntFilterInput
  Warranty: StringFilterInput
  Specs: ComponentRepeatablesSpecsFiltersInput
  Features: JSONFilterInput
  BrochureURL: StringFilterInput
  ShowroomPricing: ComponentRepeatablesCarsFiltersInput
  DisplayName: StringFilterInput
  ReviewLink: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: CarVariantFiltersInput
  and: [CarVariantFiltersInput]
  or: [CarVariantFiltersInput]
  not: CarVariantFiltersInput
}

input CarVariantInput {
  Name: String
  car_model: ID
  Year: Int
  Price: Int
  MinimumDownPaymet: Int
  MinimumInstallments: Int
  Warranty: String
  Images: [ID]
  Specs: ComponentRepeatablesSpecsInput
  Features: JSON
  BrochureURL: String
  ShowroomPricing: [ComponentRepeatablesCarsInput]
  DisplayName: String
  ReviewLink: String
  publishedAt: DateTime
}

type CarVariant {
  documentId: ID!
  Name: String!
  car_model: CarModel
  Year: Int!
  Price: Int!
  MinimumDownPaymet: Int
  MinimumInstallments: Int
  Warranty: String!
  Images_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  Images(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UploadFile]!
  Specs: ComponentRepeatablesSpecs
  Features: JSON!
  BrochureURL: String
  ShowroomPricing(filters: ComponentRepeatablesCarsFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentRepeatablesCars]
  DisplayName: String
  ReviewLink: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  locale: String
  localizations_connection(filters: CarVariantFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CarVariantRelationResponseCollection
  localizations(filters: CarVariantFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [CarVariant]!
}

type CarVariantEntityResponseCollection {
  nodes: [CarVariant!]!
  pageInfo: Pagination!
}

type CarVariantRelationResponseCollection {
  nodes: [CarVariant!]!
}

input CityFiltersInput {
  documentId: IDFilterInput
  Name: StringFilterInput
  governorate: GovernorateFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: CityFiltersInput
  and: [CityFiltersInput]
  or: [CityFiltersInput]
  not: CityFiltersInput
}

input CityInput {
  Name: String
  governorate: ID
  publishedAt: DateTime
}

type City {
  documentId: ID!
  Name: String!
  governorate: Governorate
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  locale: String
  localizations_connection(filters: CityFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CityRelationResponseCollection
  localizations(filters: CityFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [City]!
}

type CityEntityResponseCollection {
  nodes: [City!]!
  pageInfo: Pagination!
}

type CityRelationResponseCollection {
  nodes: [City!]!
}

input GovernorateFiltersInput {
  documentId: IDFilterInput
  Name: StringFilterInput
  cities: CityFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: GovernorateFiltersInput
  and: [GovernorateFiltersInput]
  or: [GovernorateFiltersInput]
  not: GovernorateFiltersInput
}

input GovernorateInput {
  Name: String
  cities: [ID]
  publishedAt: DateTime
}

type Governorate {
  documentId: ID!
  Name: String!
  cities_connection(filters: CityFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CityRelationResponseCollection
  cities(filters: CityFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [City]!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  locale: String
  localizations_connection(filters: GovernorateFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): GovernorateRelationResponseCollection
  localizations(filters: GovernorateFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Governorate]!
}

type GovernorateEntityResponseCollection {
  nodes: [Governorate!]!
  pageInfo: Pagination!
}

type GovernorateRelationResponseCollection {
  nodes: [Governorate!]!
}

input HomeCardFiltersInput {
  documentId: IDFilterInput
  Label: StringFilterInput
  Action: StringFilterInput
  BackgroundColor: StringFilterInput
  SortOrder: IntFilterInput
  IsActive: BooleanFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: HomeCardFiltersInput
  and: [HomeCardFiltersInput]
  or: [HomeCardFiltersInput]
  not: HomeCardFiltersInput
}

input HomeCardInput {
  Label: String
  Action: String
  Icon: ID
  BackgroundColor: String
  SortOrder: Int
  IsActive: Boolean
  publishedAt: DateTime
}

type HomeCard {
  documentId: ID!
  Label: String!
  Action: String!
  Icon: UploadFile!
  BackgroundColor: String
  SortOrder: Int!
  IsActive: Boolean!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  locale: String
  localizations_connection(filters: HomeCardFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): HomeCardRelationResponseCollection
  localizations(filters: HomeCardFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [HomeCard]!
}

type HomeCardEntityResponseCollection {
  nodes: [HomeCard!]!
  pageInfo: Pagination!
}

type HomeCardRelationResponseCollection {
  nodes: [HomeCard!]!
}

input ShowroomFiltersInput {
  documentId: IDFilterInput
  Name: StringFilterInput
  Description: StringFilterInput
  brands: BrandFiltersInput
  IsVerified: BooleanFilterInput
  IsFeatured: BooleanFilterInput
  OperatingHours: StringFilterInput
  Location: ComponentCommonLocationFiltersInput
  ContactInfo: ComponentCommonContactInfoFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: ShowroomFiltersInput
  and: [ShowroomFiltersInput]
  or: [ShowroomFiltersInput]
  not: ShowroomFiltersInput
}

input ShowroomInput {
  Name: String
  Description: String
  Logo: ID
  Cover: ID
  brands: [ID]
  IsVerified: Boolean
  IsFeatured: Boolean
  OperatingHours: String
  Location: ComponentCommonLocationInput
  ContactInfo: ComponentCommonContactInfoInput
  publishedAt: DateTime
}

type Showroom {
  documentId: ID!
  Name: String!
  Description: String
  Logo: UploadFile!
  Cover: UploadFile
  brands_connection(filters: BrandFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): BrandRelationResponseCollection
  brands(filters: BrandFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Brand]!
  IsVerified: Boolean
  IsFeatured: Boolean
  OperatingHours: String
  Location: ComponentCommonLocation!
  ContactInfo: ComponentCommonContactInfo!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  locale: String
  localizations_connection(filters: ShowroomFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ShowroomRelationResponseCollection
  localizations(filters: ShowroomFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Showroom]!
}

type ShowroomEntityResponseCollection {
  nodes: [Showroom!]!
  pageInfo: Pagination!
}

type ShowroomRelationResponseCollection {
  nodes: [Showroom!]!
}

union GenericMorph = ComponentRepeatablesSpecs | ComponentRepeatablesCars | ComponentCommonLocation | ComponentCommonContactInfo | UploadFile | I18NLocale | ReviewWorkflowsWorkflow | ReviewWorkflowsWorkflowStage | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser | Advertisement | Brand | CarModel | CarVariant | City | Governorate | HomeCard | Showroom

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type UsersPermissionsMe {
  id: ID!
  documentId: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}

type Query {
  uploadFile(documentId: ID!, status: PublicationStatus = PUBLISHED): UploadFile
  uploadFiles_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UploadFileEntityResponseCollection
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UploadFile]!
  i18NLocale(documentId: ID!, status: PublicationStatus = PUBLISHED): I18NLocale
  i18NLocales_connection(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): I18NLocaleEntityResponseCollection
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [I18NLocale]!
  reviewWorkflowsWorkflow(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflow
  reviewWorkflowsWorkflows_connection(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowEntityResponseCollection
  reviewWorkflowsWorkflows(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [ReviewWorkflowsWorkflow]!
  reviewWorkflowsWorkflowStage(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStage
  reviewWorkflowsWorkflowStages_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStageEntityResponseCollection
  reviewWorkflowsWorkflowStages(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [ReviewWorkflowsWorkflowStage]!
  usersPermissionsRole(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsRole
  usersPermissionsRoles_connection(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UsersPermissionsRole]!
  usersPermissionsUser(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsUser
  usersPermissionsUsers_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UsersPermissionsUserEntityResponseCollection
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UsersPermissionsUser]!
  advertisement(
    documentId: ID!
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): Advertisement
  advertisements_connection(
    filters: AdvertisementFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): AdvertisementEntityResponseCollection
  advertisements(
    filters: AdvertisementFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): [Advertisement]!
  brand(
    documentId: ID!
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): Brand
  brands_connection(
    filters: BrandFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): BrandEntityResponseCollection
  brands(
    filters: BrandFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): [Brand]!
  carModel(
    documentId: ID!
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): CarModel
  carModels_connection(
    filters: CarModelFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): CarModelEntityResponseCollection
  carModels(
    filters: CarModelFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): [CarModel]!
  carVariant(
    documentId: ID!
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): CarVariant
  carVariants_connection(
    filters: CarVariantFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): CarVariantEntityResponseCollection
  carVariants(
    filters: CarVariantFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): [CarVariant]!
  city(
    documentId: ID!
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): City
  cities_connection(
    filters: CityFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): CityEntityResponseCollection
  cities(
    filters: CityFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): [City]!
  governorate(
    documentId: ID!
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): Governorate
  governorates_connection(
    filters: GovernorateFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): GovernorateEntityResponseCollection
  governorates(
    filters: GovernorateFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): [Governorate]!
  homeCard(
    documentId: ID!
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): HomeCard
  homeCards_connection(
    filters: HomeCardFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): HomeCardEntityResponseCollection
  homeCards(
    filters: HomeCardFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): [HomeCard]!
  showroom(
    documentId: ID!
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): Showroom
  showrooms_connection(
    filters: ShowroomFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): ShowroomEntityResponseCollection
  showrooms(
    filters: ShowroomFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): [Showroom]!
  me: UsersPermissionsMe
}

type Mutation {
  createReviewWorkflowsWorkflow(status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowInput!): ReviewWorkflowsWorkflow
  updateReviewWorkflowsWorkflow(documentId: ID!, status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowInput!): ReviewWorkflowsWorkflow
  deleteReviewWorkflowsWorkflow(documentId: ID!): DeleteMutationResponse
  createReviewWorkflowsWorkflowStage(status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowStageInput!): ReviewWorkflowsWorkflowStage
  updateReviewWorkflowsWorkflowStage(documentId: ID!, status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowStageInput!): ReviewWorkflowsWorkflowStage
  deleteReviewWorkflowsWorkflowStage(documentId: ID!): DeleteMutationResponse
  createAdvertisement(
    status: PublicationStatus = PUBLISHED
    data: AdvertisementInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): Advertisement
  updateAdvertisement(
    documentId: ID!
    status: PublicationStatus = PUBLISHED
    data: AdvertisementInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): Advertisement
  deleteAdvertisement(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): DeleteMutationResponse
  createBrand(
    status: PublicationStatus = PUBLISHED
    data: BrandInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): Brand
  updateBrand(
    documentId: ID!
    status: PublicationStatus = PUBLISHED
    data: BrandInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): Brand
  deleteBrand(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): DeleteMutationResponse
  createCarModel(
    status: PublicationStatus = PUBLISHED
    data: CarModelInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): CarModel
  updateCarModel(
    documentId: ID!
    status: PublicationStatus = PUBLISHED
    data: CarModelInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): CarModel
  deleteCarModel(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): DeleteMutationResponse
  createCarVariant(
    status: PublicationStatus = PUBLISHED
    data: CarVariantInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): CarVariant
  updateCarVariant(
    documentId: ID!
    status: PublicationStatus = PUBLISHED
    data: CarVariantInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): CarVariant
  deleteCarVariant(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): DeleteMutationResponse
  createCity(
    status: PublicationStatus = PUBLISHED
    data: CityInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): City
  updateCity(
    documentId: ID!
    status: PublicationStatus = PUBLISHED
    data: CityInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): City
  deleteCity(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): DeleteMutationResponse
  createGovernorate(
    status: PublicationStatus = PUBLISHED
    data: GovernorateInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): Governorate
  updateGovernorate(
    documentId: ID!
    status: PublicationStatus = PUBLISHED
    data: GovernorateInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): Governorate
  deleteGovernorate(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): DeleteMutationResponse
  createHomeCard(
    status: PublicationStatus = PUBLISHED
    data: HomeCardInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): HomeCard
  updateHomeCard(
    documentId: ID!
    status: PublicationStatus = PUBLISHED
    data: HomeCardInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): HomeCard
  deleteHomeCard(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): DeleteMutationResponse
  createShowroom(
    status: PublicationStatus = PUBLISHED
    data: ShowroomInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): Showroom
  updateShowroom(
    documentId: ID!
    status: PublicationStatus = PUBLISHED
    data: ShowroomInput!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): Showroom
  deleteShowroom(
    documentId: ID!

    """The locale to use for the query"""
    locale: I18NLocaleCode
  ): DeleteMutationResponse
  updateUploadFile(id: ID!, info: FileInfoInput): UploadFile!
  deleteUploadFile(id: ID!): UploadFile

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Update an existing role"""
  updateUsersPermissionsRole(id: ID!, data: UsersPermissionsRoleInput!): UsersPermissionsUpdateRolePayload

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!

  """Update an existing user"""
  updateUsersPermissionsUser(id: ID!, data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload

  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
